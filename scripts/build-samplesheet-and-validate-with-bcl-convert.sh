#!/usr/bin/env bash

set -euo pipefail

: '
Run v2-samplesheet-maker then run bclconvert --validate-samplesheet

Use the reads attribute to mock up the xml file

Requires jq, yq and docker or bcl-convert binary to run
'

## FUNCTIONS ##
print_help(){
  echo "
Usage: build-samplesheet-and-validate-with-bcl-convert.sh <input-json> [<output-samplesheet-path>] [--options]

Options:
  <input-json>:               Required, input json to convert to csv and then run against bclconvert.
  <output-samplesheet-path>:  Optional, specify an output path for the v2 samplesheet that is generated by v2-samplesheet-maker
  -h | --help                 Optional, print this help page and exit
  --*:                        Optional, any additional bclconvert commandline args that you intend to use when running the script.
                              Both --arg=value and --arg value conventions are supported.
    This excludes the following parameters:
      --bcl-validate-sample-sheet-only         (this is always set to true)
      --run-info                               (we generate this using the reads section of the json file)
      --sample-sheet                           (we generate this using the input json)
      --bcl-input-directory                    (we make a fake directory for this)
      --output-directory                       (we make an output directory for this)

    Instead this might include:
      --bcl-sampleproject-subdirectories=true  (required if Sample_Project column is in the SampleSheet)
      --sample-name-column-enabled=true        (required if Sample_Name column is in the SampleSheet)

Description:
Generates a mockup of the RunInfo.xml based on the reads attribute of the json input.
Then converts the samplesheet from json to csv and runs
bclconvert --validate-samplesheet-only.

If v2-samplesheet-maker is not found on PATH, then the docker image is pulled from ghcr.io/umccr/v2-samplesheet-maker,
If bcl-convert is not found on PATH, then the docker image is pulled from ghcr.io/umccr/bcl-convert

Requirements:
  * jq    (v1.5+)
  * yq    (v4.18+)
  * v2-samplesheet-maker | docker
  * bcl-convert | docker
  * build-runinfo-xml-from-reads-json.sh

Example:
build-samplesheet-and-validate-with-bcl-convert.sh examples/inputs/standard-sheet-with-settings.json --bcl-sampleproject-subdirectories true
"
}

echo_stderr(){
  : '
  Write output to stderr
  '
  echo "${@}" 1>&2
}


## Check binaries
if ! type jq 1>/dev/null 2>&1; then
  echo_stderr "Please install jq"
  print_help | echo_stderr
  exit 1
fi

if ! type yq 1>/dev/null 2>&1; then
  echo_stderr "Please install yq"
  print_help | echo_stderr
  exit 1
fi

if ! type v2-samplesheet-maker 1>/dev/null 2>&1 && ! type docker 1>/dev/null 2>&1; then
  echo_stderr "Please install either v2-samplesheet-maker or docker"
  print_help | echo_stderr
  exit 1
elif ! type v2-samplesheet-maker 1>/dev/null 2>&1; then
  echo_stderr "Pulling v2-samplesheet-maker image from ghcr.io"
  docker pull ghcr.io/umccr/v2-samplesheet-maker:latest
fi

if ! type build-runinfo-xml-from-reads-json.sh 1>/dev/null 2>&1; then
  echo_stderr "Please install build-runinfo-xml-from-reads-json.sh from this project"
  print_help | echo_stderr
  exit 1
fi

if ! type bcl-convert 1>/dev/null 2>&1 && ! type docker 1>/dev/null 2>&1; then
  echo_stderr "Please install either bcl-convert or docker"
  print_help | echo_stderr
  exit 1
elif ! type bcl-convert 1>/dev/null 2>&1; then
  echo_stderr "Pulling bcl-convert image from ghcr.io"
  docker pull ghcr.io/umccr/bcl-convert:latest
fi

# Get inputs
# Get args from command line
input_json_file=""
output_samplesheet_path=""
positional_args_array=()
bcl_convert_args=()

while [ $# -gt 0 ]; do
  case "$1" in
    -h | --help)
      print_help
      exit 0
      ;;
    --*)
      # Let's add in the parameter arg
      bcl_convert_args=("${bcl_convert_args[@]}" "$1")
      # First check if $2 is of any length
      if [[ -n "${2-}" ]]; then
        # Check if the parameter takes a value
        case "$2" in
          --*)
            # Check if just another parameter, ignore for now
            :
            ;;
          *)
            bcl_convert_args=("${bcl_convert_args[@]}" "$2")
            shift 1
            ;;
        esac
      fi
      ;;
    *)
      positional_args_array+=( "${1-}" )
      ;;
  esac
  shift 1
done

# Get positional args
input_json_file="${positional_args_array[0]}"
output_samplesheet_path="${positional_args_array[1]-}"

## Validate input json file is readable and valid json
if [[ -z "${input_json_file}" ]]; then
  echo_stderr "Please specify a json input file as a v2 samplesheet"
  print_help
  exit 1
fi

if [[ ! -r "${input_json_file}" ]]; then
  echo_stderr "Could not read ${input_json_file}"
fi

if ! jq < "${input_json_file}" 1>/dev/null; then
  echo_stderr "File '${input_json_file}' does not appear to be valid json"
fi

## Validate samplesheet output path is valid
if [[ -z "${output_samplesheet_path}" ]]; then
  echo_stderr "No output path provided, samplesheet generated by v2-samplesheet-maker will be deleted after generation"
elif [[ ! -d "$( dirname "${input_json_file}")" ]]; then
  echo_stderr "Could write to output '${output_samplesheet_path}', parent directory does not exist"
  exit 1
elif [[ -r "${output_samplesheet_path}" ]]; then
  echo_stderr "Output samplesheet path '${output_samplesheet_path}' already exists, please delete and try again"
  exit 1
fi

## Create trap
trap 'echo_stderr "bclconvert failed, cleaning up and exiting script with non-zero exit code \"$?\""; rm -rf ${run_info_tmp_dir} ${samplesheet_tmp_dir}' EXIT

## Create tmp files
run_info_tmp_dir="$(mktemp -d)"
run_info_tmp_file="$(mktemp -p "${run_info_tmp_dir}" -t RunInfo.XXXXXXXX.xml)"
samplesheet_tmp_dir="$(mktemp -d)"
samplesheet_tmp_file="$(mktemp -p "${samplesheet_tmp_dir}" -t SampleSheet.XXXXXXXX.csv)"
bclconvert_input_path="$(mktemp -d)"
output_path="$(mktemp -d)"

echo_stderr "Generating a tmp run info xml file"
reads_json_str="$( \
  jq --raw-output --compact-output \
   '
     .reads
   ' < "${input_json_file}"
)"
# Needs to not exist
rm "${run_info_tmp_file}"
build-runinfo-xml-from-reads-json.sh "${reads_json_str}" "${run_info_tmp_file}"

# Write out samplesheet
echo_stderr "Generating v2 samplesheet from json input"
if ! type v2-samplesheet-maker 1>/dev/null 2>&1; then
  docker run \
  --rm \
  --volume "$PWD:$PWD" \
  --workdir "$PWD" \
  --volume "${input_json_file}:${input_json_file}" \
  --volume "${samplesheet_tmp_dir}:${samplesheet_tmp_dir}" \
  ghcr.io/umccr/v2-samplesheet-maker:latest \
    v2-samplesheet-maker "${input_json_file}" "${samplesheet_tmp_file}"
else
  v2-samplesheet-maker "${input_json_file}" "${samplesheet_tmp_file}"
fi
echo_stderr "Completed v2 samplesheet generation"

# Run bclconvert through docker or standalone
echo_stderr "Running bcl-convert --validate on newly generated v2 samplesheet"
if ! type bcl-convert 1>/dev/null 2>&1; then
  eval docker run \
    --rm \
    --volume "$PWD:$PWD" \
    --workdir "$PWD" \
    --volume "${run_info_tmp_dir}:${run_info_tmp_dir}" \
    --volume "${samplesheet_tmp_dir}:${samplesheet_tmp_dir}" \
    --volume "${bclconvert_input_path}:${bclconvert_input_path}" \
    ghcr.io/umccr/bcl-convert:latest \
      bcl-convert \
        --bcl-validate-sample-sheet-only true \
        --run-info "${run_info_tmp_file}" \
        --sample-sheet "${samplesheet_tmp_file}" \
        --bcl-input-directory "${bclconvert_input_path}" \
        --output-directory "${output_path}" \
        '"${bcl_convert_args[@]}"'
else
  eval bcl-convert \
    --bcl-validate-sample-sheet-only true \
    --run-info "${run_info_tmp_file}" \
    --sample-sheet "${samplesheet_tmp_file}" \
    --bcl-input-directory "${bclconvert_input_path}" \
    --output-directory "${output_path}" \
    '"${bcl_convert_args[@]}"'
fi
echo_stderr "Completed bcl-convert validation on newly generated v2 samplesheet"

if [[ -n "${output_samplesheet_path}" ]]; then
  echo_stderr "Writing validated samplesheet to '${output_samplesheet_path}'"
  mv "${samplesheet_tmp_file}" "${output_samplesheet_path}"
fi

echo_stderr "Cleaning up"
rm -rf "${run_info_tmp_dir}" "${samplesheet_tmp_dir}"

trap - EXIT
